<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.test.repository.BillingRepositoryTest" time="0.473" tests="6" errors="3" skipped="0" failures="3">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="c:\Users\rumai\OneDrive\Desktop\New folder (2)\syos_system\target\test-classes;c:\Users\rumai\OneDrive\Desktop\New folder (2)\syos_system\target\classes;C:\Users\rumai\.m2\repository\org\postgresql\postgresql\42.6.0\postgresql-42.6.0.jar;C:\Users\rumai\.m2\repository\org\checkerframework\checker-qual\3.31.0\checker-qual-3.31.0.jar;C:\Users\rumai\.m2\repository\org\mindrot\jbcrypt\0.4\jbcrypt-0.4.jar;C:\Users\rumai\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.2\junit-jupiter-5.10.2.jar;C:\Users\rumai\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.2\junit-jupiter-params-5.10.2.jar;C:\Users\rumai\.m2\repository\org\mockito\mockito-core\5.11.0\mockito-core-5.11.0.jar;C:\Users\rumai\.m2\repository\net\bytebuddy\byte-buddy\1.14.12\byte-buddy-1.14.12.jar;C:\Users\rumai\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.12\byte-buddy-agent-1.14.12.jar;C:\Users\rumai\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\rumai\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.0\junit-jupiter-api-5.10.0.jar;C:\Users\rumai\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\rumai\.m2\repository\org\junit\platform\junit-platform-commons\1.10.0\junit-platform-commons-1.10.0.jar;C:\Users\rumai\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\rumai\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.0\junit-jupiter-engine-5.10.0.jar;C:\Users\rumai\.m2\repository\org\junit\platform\junit-platform-engine\1.10.0\junit-platform-engine-1.10.0.jar;C:\Users\rumai\.m2\repository\org\mockito\mockito-junit-jupiter\5.11.0\mockito-junit-jupiter-5.11.0.jar;C:\Users\rumai\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar;C:\Users\rumai\.m2\repository\javax\servlet\jsp\jsp-api\2.2\jsp-api-2.2.jar;C:\Users\rumai\.m2\repository\javax\servlet\jstl\1.2\jstl-1.2.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="Asia/Colombo"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-17\bin"/>
    <property name="sun.java.command" value="C:\Users\rumai\AppData\Local\Temp\surefire6084395104902566682\surefirebooter-20251003191501870_3.jar C:\Users\rumai\AppData\Local\Temp\surefire6084395104902566682 2025-10-03T19-15-01_520-jvmRun1 surefire-20251003191501870_1tmp surefire_0-20251003191501870_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="c:\Users\rumai\OneDrive\Desktop\New folder (2)\syos_system\target\test-classes;c:\Users\rumai\OneDrive\Desktop\New folder (2)\syos_system\target\classes;C:\Users\rumai\.m2\repository\org\postgresql\postgresql\42.6.0\postgresql-42.6.0.jar;C:\Users\rumai\.m2\repository\org\checkerframework\checker-qual\3.31.0\checker-qual-3.31.0.jar;C:\Users\rumai\.m2\repository\org\mindrot\jbcrypt\0.4\jbcrypt-0.4.jar;C:\Users\rumai\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.2\junit-jupiter-5.10.2.jar;C:\Users\rumai\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.2\junit-jupiter-params-5.10.2.jar;C:\Users\rumai\.m2\repository\org\mockito\mockito-core\5.11.0\mockito-core-5.11.0.jar;C:\Users\rumai\.m2\repository\net\bytebuddy\byte-buddy\1.14.12\byte-buddy-1.14.12.jar;C:\Users\rumai\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.12\byte-buddy-agent-1.14.12.jar;C:\Users\rumai\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\rumai\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.0\junit-jupiter-api-5.10.0.jar;C:\Users\rumai\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\rumai\.m2\repository\org\junit\platform\junit-platform-commons\1.10.0\junit-platform-commons-1.10.0.jar;C:\Users\rumai\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\rumai\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.0\junit-jupiter-engine-5.10.0.jar;C:\Users\rumai\.m2\repository\org\junit\platform\junit-platform-engine\1.10.0\junit-platform-engine-1.10.0.jar;C:\Users\rumai\.m2\repository\org\mockito\mockito-junit-jupiter\5.11.0\mockito-junit-jupiter-5.11.0.jar;C:\Users\rumai\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar;C:\Users\rumai\.m2\repository\javax\servlet\jsp\jsp-api\2.2\jsp-api-2.2.jar;C:\Users\rumai\.m2\repository\javax\servlet\jstl\1.2\jstl-1.2.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\rumai"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2023-01-17"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-17"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="c:\Users\rumai\OneDrive\Desktop\New folder (2)\syos_system"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="surefire.real.class.path" value="C:\Users\rumai\AppData\Local\Temp\surefire6084395104902566682\surefirebooter-20251003191501870_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.6+9-LTS-190"/>
    <property name="user.name" value="rumai"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\rumai\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\rumai\AppData\Local\Temp\"/>
    <property name="java.version" value="17.0.6"/>
    <property name="user.dir" value="c:\Users\rumai\OneDrive\Desktop\New folder (2)\syos_system"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-17\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Python313\Scripts\;C:\Python313\;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Java\jdk-17\bin;C:\flutter\bin;C:\Program Files\Git\cmd;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA app\NvDLISR;C:\xampp\php;C:\composer;C:\Users\rumai\AppData\Local\Android\Sdk\platform-tools;C:\Program Files\PostgreSQL\17\bin;C:\Users\rumai\AppData\Local\Pub\Cache;C:\Program Files\OpenSSL-Win64\bin;C:\ngrok;C:\Program Files\apache-maven-3.9.9\bin;C:\Program Files\nodejs\;C:\ProgramData\chocolatey\bin;C:\Users\rumai\AppData\Local\nvm;C:\nvm4w\nodejs;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\GitHub CLI\;C:\Users\rumai\AppData\Local\Programs\Python\Launcher\;C:\Users\rumai\AppData\Local\Microsoft\WindowsApps;C:\Users\rumai\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\rumai\AppData\Roaming\Composer\vendor\bin;C:\Program Files\Java\jdk-17\bin;C:\Users\rumai\AppData\Roaming\npm;C:\Users\rumai\AppData\Local\nvm;C:\nvm4w\nodejs;C:\Users\rumai\AppData\Local\nvm;;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="17.0.6+9-LTS-190"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="nextSerial_noExistingBills_returnsOne" classname="com.test.repository.BillingRepositoryTest" time="0.426">
    <error message="&#10;Strict stubbing argument mismatch. Please check:&#10; - this invocation of &apos;prepareStatement&apos; method:&#10;    mockConnection.prepareStatement(&#10;    &quot;SELECT COALESCE(MAX(serial_number), 0) + 1&#10;  FROM bill&#10; WHERE DATE(bill_date) = CURRENT_DATE&#10;&quot;&#10;);&#10;    -&gt; at com.syos.repository.BillingRepository.nextSerial(BillingRepository.java:74)&#10; - has following stubbing(s) with different arguments:&#10;    1. mockConnection.prepareStatement(&quot;&quot;);&#10;      -&gt; at com.test.repository.BillingRepositoryTest.nextSerial_noExistingBills_returnsOne(BillingRepositoryTest.java:226)&#10;Typically, stubbing argument mismatch indicates user mistake when writing tests.&#10;Mockito fails early so that you can debug potential problem easily.&#10;However, there are legit scenarios when this exception generates false negative signal:&#10;  - stubbing the same method multiple times using &apos;given().will()&apos; or &apos;when().then()&apos; API&#10;    Please use &apos;will().given()&apos; or &apos;doReturn().when()&apos; API for stubbing.&#10;  - stubbed method is intentionally invoked with different arguments by code under test&#10;    Please use default or &apos;silent&apos; JUnit Rule (equivalent of Strictness.LENIENT).&#10;For more information see javadoc for PotentialStubbingProblem class." type="org.mockito.exceptions.misusing.PotentialStubbingProblem"><![CDATA[org.mockito.exceptions.misusing.PotentialStubbingProblem: 

Strict stubbing argument mismatch. Please check:
 - this invocation of 'prepareStatement' method:
    mockConnection.prepareStatement(
    "SELECT COALESCE(MAX(serial_number), 0) + 1
  FROM bill
 WHERE DATE(bill_date) = CURRENT_DATE
"
);
    -> at com.syos.repository.BillingRepository.nextSerial(BillingRepository.java:74)
 - has following stubbing(s) with different arguments:
    1. mockConnection.prepareStatement("");
      -> at com.test.repository.BillingRepositoryTest.nextSerial_noExistingBills_returnsOne(BillingRepositoryTest.java:226)
Typically, stubbing argument mismatch indicates user mistake when writing tests.
Mockito fails early so that you can debug potential problem easily.
However, there are legit scenarios when this exception generates false negative signal:
  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API
    Please use 'will().given()' or 'doReturn().when()' API for stubbing.
  - stubbed method is intentionally invoked with different arguments by code under test
    Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).
For more information see javadoc for PotentialStubbingProblem class.
	at com.syos.repository.BillingRepository.nextSerial(BillingRepository.java:74)
	at com.test.repository.BillingRepositoryTest.nextSerial_noExistingBills_returnsOne(BillingRepositoryTest.java:233)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></error>
  </testcase>
  <testcase name="nextSerial_existingBills_returnsMaxPlusOne" classname="com.test.repository.BillingRepositoryTest" time="0.006">
    <error message="&#10;Strict stubbing argument mismatch. Please check:&#10; - this invocation of &apos;prepareStatement&apos; method:&#10;    mockConnection.prepareStatement(&#10;    &quot;SELECT COALESCE(MAX(serial_number), 0) + 1&#10;  FROM bill&#10; WHERE DATE(bill_date) = CURRENT_DATE&#10;&quot;&#10;);&#10;    -&gt; at com.syos.repository.BillingRepository.nextSerial(BillingRepository.java:74)&#10; - has following stubbing(s) with different arguments:&#10;    1. mockConnection.prepareStatement(&quot;&quot;);&#10;      -&gt; at com.test.repository.BillingRepositoryTest.nextSerial_existingBills_returnsMaxPlusOne(BillingRepositoryTest.java:201)&#10;Typically, stubbing argument mismatch indicates user mistake when writing tests.&#10;Mockito fails early so that you can debug potential problem easily.&#10;However, there are legit scenarios when this exception generates false negative signal:&#10;  - stubbing the same method multiple times using &apos;given().will()&apos; or &apos;when().then()&apos; API&#10;    Please use &apos;will().given()&apos; or &apos;doReturn().when()&apos; API for stubbing.&#10;  - stubbed method is intentionally invoked with different arguments by code under test&#10;    Please use default or &apos;silent&apos; JUnit Rule (equivalent of Strictness.LENIENT).&#10;For more information see javadoc for PotentialStubbingProblem class." type="org.mockito.exceptions.misusing.PotentialStubbingProblem"><![CDATA[org.mockito.exceptions.misusing.PotentialStubbingProblem: 

Strict stubbing argument mismatch. Please check:
 - this invocation of 'prepareStatement' method:
    mockConnection.prepareStatement(
    "SELECT COALESCE(MAX(serial_number), 0) + 1
  FROM bill
 WHERE DATE(bill_date) = CURRENT_DATE
"
);
    -> at com.syos.repository.BillingRepository.nextSerial(BillingRepository.java:74)
 - has following stubbing(s) with different arguments:
    1. mockConnection.prepareStatement("");
      -> at com.test.repository.BillingRepositoryTest.nextSerial_existingBills_returnsMaxPlusOne(BillingRepositoryTest.java:201)
Typically, stubbing argument mismatch indicates user mistake when writing tests.
Mockito fails early so that you can debug potential problem easily.
However, there are legit scenarios when this exception generates false negative signal:
  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API
    Please use 'will().given()' or 'doReturn().when()' API for stubbing.
  - stubbed method is intentionally invoked with different arguments by code under test
    Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).
For more information see javadoc for PotentialStubbingProblem class.
	at com.syos.repository.BillingRepository.nextSerial(BillingRepository.java:74)
	at com.test.repository.BillingRepositoryTest.nextSerial_existingBills_returnsMaxPlusOne(BillingRepositoryTest.java:208)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></error>
  </testcase>
  <testcase name="save_validBillWithItems_commitsTransaction" classname="com.test.repository.BillingRepositoryTest" time="0.01">
    <failure message="&#10;mockConnection.prepareStatement(&#10;    &lt;custom argument matcher&gt;&#10;);&#10;Wanted 1 time:&#10;-&gt; at com.test.repository.BillingRepositoryTest.save_validBillWithItems_commitsTransaction(BillingRepositoryTest.java:107)&#10;But was 2 times:&#10;-&gt; at com.syos.repository.BillingRepository.save(BillingRepository.java:32)&#10;-&gt; at com.syos.repository.BillingRepository.save(BillingRepository.java:49)&#10;&#10;" type="org.mockito.exceptions.verification.TooManyActualInvocations"><![CDATA[org.mockito.exceptions.verification.TooManyActualInvocations: 

mockConnection.prepareStatement(
    <custom argument matcher>
);
Wanted 1 time:
-> at com.test.repository.BillingRepositoryTest.save_validBillWithItems_commitsTransaction(BillingRepositoryTest.java:107)
But was 2 times:
-> at com.syos.repository.BillingRepository.save(BillingRepository.java:32)
-> at com.syos.repository.BillingRepository.save(BillingRepository.java:49)


	at com.test.repository.BillingRepositoryTest.save_validBillWithItems_commitsTransaction(BillingRepositoryTest.java:107)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
  </testcase>
  <testcase name="save_itemSaveFails_rollbacksTransaction" classname="com.test.repository.BillingRepositoryTest" time="0.01">
    <failure message="&#10;Wanted but not invoked:&#10;mockConnection.rollback();&#10;-&gt; at com.test.repository.BillingRepositoryTest.save_itemSaveFails_rollbacksTransaction(BillingRepositoryTest.java:189)&#10;&#10;However, there were exactly 4 interactions with this mock:&#10;mockConnection.setAutoCommit(false);&#10;-&gt; at com.syos.repository.BillingRepository.save(BillingRepository.java:29)&#10;&#10;mockConnection.prepareStatement(&#10;    &quot;INSERT INTO bill&#10;  (serial_number, bill_date, total_amount, cash_tendered, change_returned, transaction_type)&#10;VALUES (?, ?, ?, ?, ?, ?)&#10;RETURNING id&#10;&quot;&#10;);&#10;-&gt; at com.syos.repository.BillingRepository.save(BillingRepository.java:32)&#10;&#10;mockConnection.prepareStatement(&#10;    &quot;INSERT INTO bill_item (bill_id, product_code, quantity, total_price, discount_amount)&#10;VALUES (?, ?, ?, ?, ?)&#10;&quot;&#10;);&#10;-&gt; at com.syos.repository.BillingRepository.save(BillingRepository.java:49)&#10;&#10;mockConnection.close();&#10;-&gt; at com.syos.repository.BillingRepository.save(BillingRepository.java:28)&#10;&#10;" type="Wanted but not invoked"><![CDATA[Wanted but not invoked:
mockConnection.rollback();
-> at com.test.repository.BillingRepositoryTest.save_itemSaveFails_rollbacksTransaction(BillingRepositoryTest.java:189)

However, there were exactly 4 interactions with this mock:
mockConnection.setAutoCommit(false);
-> at com.syos.repository.BillingRepository.save(BillingRepository.java:29)

mockConnection.prepareStatement(
    "INSERT INTO bill
  (serial_number, bill_date, total_amount, cash_tendered, change_returned, transaction_type)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id
"
);
-> at com.syos.repository.BillingRepository.save(BillingRepository.java:32)

mockConnection.prepareStatement(
    "INSERT INTO bill_item (bill_id, product_code, quantity, total_price, discount_amount)
VALUES (?, ?, ?, ?, ?)
"
);
-> at com.syos.repository.BillingRepository.save(BillingRepository.java:49)

mockConnection.close();
-> at com.syos.repository.BillingRepository.save(BillingRepository.java:28)


	at com.test.repository.BillingRepositoryTest.save_itemSaveFails_rollbacksTransaction(BillingRepositoryTest.java:189)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
  </testcase>
  <testcase name="nextSerial_queryFails_throwsRuntimeException" classname="com.test.repository.BillingRepositoryTest" time="0.008">
    <error message="&#10;Unnecessary stubbings detected.&#10;Clean &amp; maintainable test code requires zero unnecessary code.&#10;Following stubbings are unnecessary (click to navigate to relevant line of code):&#10;  1. -&gt; at com.test.repository.BillingRepositoryTest.setUp(BillingRepositoryTest.java:67)&#10;  2. -&gt; at com.test.repository.BillingRepositoryTest.setUp(BillingRepositoryTest.java:68)&#10;Please remove unnecessary stubbings or use &apos;lenient&apos; strictness. More info: javadoc for UnnecessaryStubbingException class." type="org.mockito.exceptions.misusing.UnnecessaryStubbingException"><![CDATA[org.mockito.exceptions.misusing.UnnecessaryStubbingException: 

Unnecessary stubbings detected.
Clean & maintainable test code requires zero unnecessary code.
Following stubbings are unnecessary (click to navigate to relevant line of code):
  1. -> at com.test.repository.BillingRepositoryTest.setUp(BillingRepositoryTest.java:67)
  2. -> at com.test.repository.BillingRepositoryTest.setUp(BillingRepositoryTest.java:68)
Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.
	at org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:197)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></error>
  </testcase>
  <testcase name="save_billSaveFails_rollbacksTransaction" classname="com.test.repository.BillingRepositoryTest" time="0.005">
    <failure message="&#10;Wanted but not invoked:&#10;mockConnection.rollback();&#10;-&gt; at com.test.repository.BillingRepositoryTest.save_billSaveFails_rollbacksTransaction(BillingRepositoryTest.java:159)&#10;&#10;However, there were exactly 3 interactions with this mock:&#10;mockConnection.setAutoCommit(false);&#10;-&gt; at com.syos.repository.BillingRepository.save(BillingRepository.java:29)&#10;&#10;mockConnection.prepareStatement(&#10;    &quot;INSERT INTO bill&#10;  (serial_number, bill_date, total_amount, cash_tendered, change_returned, transaction_type)&#10;VALUES (?, ?, ?, ?, ?, ?)&#10;RETURNING id&#10;&quot;&#10;);&#10;-&gt; at com.syos.repository.BillingRepository.save(BillingRepository.java:32)&#10;&#10;mockConnection.close();&#10;-&gt; at com.syos.repository.BillingRepository.save(BillingRepository.java:28)&#10;&#10;" type="Wanted but not invoked"><![CDATA[Wanted but not invoked:
mockConnection.rollback();
-> at com.test.repository.BillingRepositoryTest.save_billSaveFails_rollbacksTransaction(BillingRepositoryTest.java:159)

However, there were exactly 3 interactions with this mock:
mockConnection.setAutoCommit(false);
-> at com.syos.repository.BillingRepository.save(BillingRepository.java:29)

mockConnection.prepareStatement(
    "INSERT INTO bill
  (serial_number, bill_date, total_amount, cash_tendered, change_returned, transaction_type)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id
"
);
-> at com.syos.repository.BillingRepository.save(BillingRepository.java:32)

mockConnection.close();
-> at com.syos.repository.BillingRepository.save(BillingRepository.java:28)


	at com.test.repository.BillingRepositoryTest.save_billSaveFails_rollbacksTransaction(BillingRepositoryTest.java:159)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
  </testcase>
</testsuite>